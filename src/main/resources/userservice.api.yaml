openapi: 3.0.0
info:
  title: Users Service API
  description: API for managing user details and validation
  version: 1.0.0
servers:
  - url: http://localhost:8080/auth
    description: Local server

paths:
  /tokens:
    post:
      operationId: generateToken
      summary: Create an opaque token for the user
      description: Creates an opaque token for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: Successfully created a token for the given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDetailsResponse'
        '404':
          description: User not found
        '400': 
          description: Invalid inputs
        '500':
          description: Internal server error

  /tokens/validate:
    get:
      summary: Validate user token
      description: Validates the token and returns user details
      operationId: authorizeUserToken
      responses:
        '200':
          description: User is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
        - BearerAuth : []

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "Password123!"
      required:
        - username
        - password
    UserDetailsResponse:
      type: object
      properties:
        id:
          type: string
          example: "123"
        scopes:
          type: array
          items:
            type: string
          example: [bid:create, auction:read, user:read_contact]  
      required:
        - id  
        - username
        - privileges 
    TokenDetailsResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJHGcdsjfldsfdssssssvdfvdfvdf"
      required:
        - token      
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer